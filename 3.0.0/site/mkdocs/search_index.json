{
    "docs": [
        {
            "location": "/",
            "text": "Super Gluu Documentation\n#\n\n\nSuper Gluu is a free and secure two-factor authentication mobile application. It is based on the \nfree open source oxPush2 two-factor authentication application\n.\n\n\n\n\nUser Guide\n\n\nAdmin Guide\n\n\nDeveloper Guide\n\n\n\n\nSuper Gluu can be used to achieve multi-factor authentication to applications that use a \nGluu Server\n for login.\n\n\nHow it works\n#\n\n\nSuper Gluu supports two workflows. It can be used as a one-step authentication to a website, where the person scans a QR code, and the Gluu Server looks up which person is associated with that phone. It can also be used for a two step authentication, where the person logs into a website with username and password, and then the person receives an out of band push notification to the mobile device to authorize access.\n\n\nFIDO U2F\n#\n\n\nThe Gluu Server does more than look at the device ID to grant access. This application uses the FIDO U2F endpoints on the Gluu Server to enroll a public key. When authentication happens, there is a challenge response to ensure that the device has the respective private key.\n\n\nNSTIC Funding\n#\n\n\nFunding for this project was provided as part of a NSTIC pilot. The base code is available on \nGithub\n. This means that if you want to brand the application with your own logo, and make it available on the App Store, you are welcome to do so.\n\n\nGluu Server IAM Platform\n#\n\n\nThe best and easiest way to use Super Gluu is in conjunction with the Gluu Server. \n\n\nThe Gluu Server is an identity and access management platform that implements open standards such as SAML, OpenID Connect, UMA, FIDO and SCIM to enable single sign-on, strong authentication, and identity and access management. \n\n\nYou can point many applications at the Gluu Server to handle user authentication. The Gluu Server ships with out-of-the-box support for Super Gluu. Follow the \nadmin guide\n to learn how to enable Super Gluu authentication in your Gluu Server. Once enabled, users will need to pass Super Gluu two-factor authentication in order to access any resources protected by the Gluu Server. \n\n\nThere are free open source distributions of the Gluu Server available for several linux distributions, including Centos, Ubuntu and Red Hat. Gluu offers free and commercial support for the Gluu Server. Visit our \npricing page\n to learn more.",
            "title": "Home"
        },
        {
            "location": "/#super-gluu-documentation",
            "text": "Super Gluu is a free and secure two-factor authentication mobile application. It is based on the  free open source oxPush2 two-factor authentication application .   User Guide  Admin Guide  Developer Guide   Super Gluu can be used to achieve multi-factor authentication to applications that use a  Gluu Server  for login.",
            "title": "Super Gluu Documentation"
        },
        {
            "location": "/#how-it-works",
            "text": "Super Gluu supports two workflows. It can be used as a one-step authentication to a website, where the person scans a QR code, and the Gluu Server looks up which person is associated with that phone. It can also be used for a two step authentication, where the person logs into a website with username and password, and then the person receives an out of band push notification to the mobile device to authorize access.",
            "title": "How it works"
        },
        {
            "location": "/#fido-u2f",
            "text": "The Gluu Server does more than look at the device ID to grant access. This application uses the FIDO U2F endpoints on the Gluu Server to enroll a public key. When authentication happens, there is a challenge response to ensure that the device has the respective private key.",
            "title": "FIDO U2F"
        },
        {
            "location": "/#nstic-funding",
            "text": "Funding for this project was provided as part of a NSTIC pilot. The base code is available on  Github . This means that if you want to brand the application with your own logo, and make it available on the App Store, you are welcome to do so.",
            "title": "NSTIC Funding"
        },
        {
            "location": "/#gluu-server-iam-platform",
            "text": "The best and easiest way to use Super Gluu is in conjunction with the Gluu Server.   The Gluu Server is an identity and access management platform that implements open standards such as SAML, OpenID Connect, UMA, FIDO and SCIM to enable single sign-on, strong authentication, and identity and access management.   You can point many applications at the Gluu Server to handle user authentication. The Gluu Server ships with out-of-the-box support for Super Gluu. Follow the  admin guide  to learn how to enable Super Gluu authentication in your Gluu Server. Once enabled, users will need to pass Super Gluu two-factor authentication in order to access any resources protected by the Gluu Server.   There are free open source distributions of the Gluu Server available for several linux distributions, including Centos, Ubuntu and Red Hat. Gluu offers free and commercial support for the Gluu Server. Visit our  pricing page  to learn more.",
            "title": "Gluu Server IAM Platform"
        },
        {
            "location": "/user-guide/",
            "text": "Super Gluu User Guide\n#\n\n\nSplash screen\n#\n\n\n\n\nConfirm Push Notification\n#\n\n\nDuring first loading Super Gluu will ask to confirm receiving push notifications from Gluu server. If you don't approve, you can do it in Settings of device. About Push Notification please see below.\n\n\n\n\nLicense agreement\n#\n\n\nTo continue work with application you should accept license. You can scroll down to read all text of Super Gluu EULA. If you accept license then next time EULA text should not be visible.\n\n\n\n\nPin Code protection\n#\n\n\nTo protect access to Super Gluu you can also configure Pin code. If click YES button next screen will provide you possibility to enter Pin code, this Pin code you should use for access each time when application runs. If click NO button, means you skip Pin code protection, but you can configure Pin code in Settings menu directly in application.\n\n\n\n\nApplication tabs\n#\n\n\nWhen app is loaded and you finish setup all configuration you will see main screen. On center you can see welcome label and \"Scan QR code\" button. On top gluu logo, on bottom tab buttons: Home, Logs, Keys, Settings.\n\n\nHome - main screen.\nLogs - screen shows all logs durring enrol/authentication process.\nKeys - contains all available keys saved on device, key it's unique file which app is using for authentication device on server side.\nSettings - screen where you can configure Pin code access, reset current Pin and setup count of failed attempts Pin code.\n\n\nHome\n#\n\n\n\n\nQR Code Enrollemnt\n#\n\n\nTo enroll your device you should enter your credentials in web page of Gluu server and see QR code, after that click Scan QR code button on Home screen of application:\n\n\n\n\nIf scanning process completed and server returned correct request you will see Approve/Deny screen where are information about request and two buttons Approve & Deny. To continue enrol/authentication process please click Approve button, if you want to cancel click Deny:\n\n\n\n\nYou may noticed timer on top-right side of screen, this timer shows you how much time you have to do decision Approve or Deny. If seconds = 20 timer will be in yellow, when seconds = 10 in red. You cannot to wait a lot.\n\n\nIf you make your decision Approve/Deny screen is removed and you returned to Home screen where you may see progress messages - success or not enrol/authentication.\n\n\n\n\nLogs\n#\n\n\nEach time when you do enrol/authentication corresponding logs are saved into logs list and you can check it in Logs tab. Success enrol/authentication in green, failed in red. \n\n\nIf there are some logs - button Clear is enabled and you can clear all logs clicked on this button.\n\n\n \n\n \n\n\n\nLog has information about enrol/authentication process and you can check where, when and who did login. If you click on button with arrow on right side of some logs new information view will be shown.\n\n\nInformation screen contains data about:\n\n\n\n\nGluu server name & server url\n\n\nUser name\n\n\nIP address & location\n\n\nTime & Date\n\n\n\n\n\n\nKeys\n#\n\n\nThis tab contains all available keys for each Gluu server. Key is unique file which is generated during enrol and application is using for authentication device on server side. If you delete key for some server then you should do enrol again with new key.\n\n\n   \n\n\nYou can change key's name to new one, for this just hold on key for 3 seconds, after you will see message Do you want to change key's name? If approve you can enter new name, button \"return\" will save new name.\n\n\n\n\nAlso you can delete key from list. For this you have two ways:\n\n\n1) Swipe to left on some key, delete button will appear on right side of key row, click on this button in confirm dialog press Yes.\n\n\n2) Click on key, new information screen will appears, on top right click button Delete in confirm dialog press Yes.\n\n\n\n\nTo see information about key just tap on key and new information dialog will be shown. On this screen you can see all information about key and using button \"Delete\" remove key from device.\n\n\n\n\nSettings\n#\n\n\nIn Settings you can configure Pin code and count of failed attempts entering Pin code.\nIf during first load application you didn't setup Pin code you can do it in this screen, what you need just turn on Pin protection. You can setup new Pin code or change current. If you set up totally new Pin code you can select type of Pin code - simple 4-digit Pin or custom.\n\n\nYou can change count of failed attempts entering Pin code, range is 5-10 attempts. If you enter wrong Pin code the same times as this count application will be locked for next 10 minutes and you should wait to have possibility enter Pin code again.\n\n\n\n\nPush Notifications\n#\n\n\nSuper Gluu can receive push notifications from Gluu servers. Server sends to application enrol/authentication request the same as you get by scanning QR code directly in app. \n\n\n\n\nTo order have possibility receive push notification you should approve receiving push in settings of application during first start or in Settings of device. Second step is enrol on server, during enrol application sends to server token of device, this token will be saved on server side and be used for sending push notification to device with this token.\n\n\nIf you recieved push notification you can make decision Approve or Deny directly from push menu. You have two options:\n\n\n1) In case device in locked - swipe to left on push notification, you will see push menu with two buttons \"Approve\" and \"Deny\".\n\n\n2) In case device isn't locked - swipe down on push notification, you will see push menu with two buttons \"Approve\" and \"Deny\".\n\n\n3) If you click on push notification - application will open and you may see standard screen Approve/Deny with information and buttons.\n\n\n\n\nAlso Super Gluu can receive notification when application is opened and running in foreground mode. In that case you will see push view on top of main screen. This view contains text with request to server and two buttons Approve/Deny. You can make your decision directly on this view. If click Approve or Deny corresponding process will be launched.\n\n\n\n\nLandscape mode & Settings & iPad support\n#\n\n\nSuper gluu can work in landscape mode, you just need rotate you device and see effect. If in landscape mode some components are hidden you can scroll up/down to see them.\n\n\n \n\n \n\n \n\n\n\nIf you go to Settings of device in the bottom you may find Super Gluu aplication, there is few settings for application - push notifications, location, access to camera, pin code protection. If you want you can change configuration, but be sure it's ok for you because any change will change bevavior of application.\n\n\n\n\nYou can run Super Gluu on iPad devices, layout should be the same for all IOS devices.\nFor more information please see the \nGluu Website",
            "title": "User Guide"
        },
        {
            "location": "/user-guide/#super-gluu-user-guide",
            "text": "",
            "title": "Super Gluu User Guide"
        },
        {
            "location": "/user-guide/#splash-screen",
            "text": "",
            "title": "Splash screen"
        },
        {
            "location": "/user-guide/#confirm-push-notification",
            "text": "During first loading Super Gluu will ask to confirm receiving push notifications from Gluu server. If you don't approve, you can do it in Settings of device. About Push Notification please see below.",
            "title": "Confirm Push Notification"
        },
        {
            "location": "/user-guide/#license-agreement",
            "text": "To continue work with application you should accept license. You can scroll down to read all text of Super Gluu EULA. If you accept license then next time EULA text should not be visible.",
            "title": "License agreement"
        },
        {
            "location": "/user-guide/#pin-code-protection",
            "text": "To protect access to Super Gluu you can also configure Pin code. If click YES button next screen will provide you possibility to enter Pin code, this Pin code you should use for access each time when application runs. If click NO button, means you skip Pin code protection, but you can configure Pin code in Settings menu directly in application.",
            "title": "Pin Code protection"
        },
        {
            "location": "/user-guide/#application-tabs",
            "text": "When app is loaded and you finish setup all configuration you will see main screen. On center you can see welcome label and \"Scan QR code\" button. On top gluu logo, on bottom tab buttons: Home, Logs, Keys, Settings.  Home - main screen.\nLogs - screen shows all logs durring enrol/authentication process.\nKeys - contains all available keys saved on device, key it's unique file which app is using for authentication device on server side.\nSettings - screen where you can configure Pin code access, reset current Pin and setup count of failed attempts Pin code.",
            "title": "Application tabs"
        },
        {
            "location": "/user-guide/#home",
            "text": "",
            "title": "Home"
        },
        {
            "location": "/user-guide/#qr-code-enrollemnt",
            "text": "To enroll your device you should enter your credentials in web page of Gluu server and see QR code, after that click Scan QR code button on Home screen of application:   If scanning process completed and server returned correct request you will see Approve/Deny screen where are information about request and two buttons Approve & Deny. To continue enrol/authentication process please click Approve button, if you want to cancel click Deny:   You may noticed timer on top-right side of screen, this timer shows you how much time you have to do decision Approve or Deny. If seconds = 20 timer will be in yellow, when seconds = 10 in red. You cannot to wait a lot.  If you make your decision Approve/Deny screen is removed and you returned to Home screen where you may see progress messages - success or not enrol/authentication.",
            "title": "QR Code Enrollemnt"
        },
        {
            "location": "/user-guide/#logs",
            "text": "Each time when you do enrol/authentication corresponding logs are saved into logs list and you can check it in Logs tab. Success enrol/authentication in green, failed in red.   If there are some logs - button Clear is enabled and you can clear all logs clicked on this button.       Log has information about enrol/authentication process and you can check where, when and who did login. If you click on button with arrow on right side of some logs new information view will be shown.  Information screen contains data about:   Gluu server name & server url  User name  IP address & location  Time & Date",
            "title": "Logs"
        },
        {
            "location": "/user-guide/#keys",
            "text": "This tab contains all available keys for each Gluu server. Key is unique file which is generated during enrol and application is using for authentication device on server side. If you delete key for some server then you should do enrol again with new key.       You can change key's name to new one, for this just hold on key for 3 seconds, after you will see message Do you want to change key's name? If approve you can enter new name, button \"return\" will save new name.   Also you can delete key from list. For this you have two ways:  1) Swipe to left on some key, delete button will appear on right side of key row, click on this button in confirm dialog press Yes.  2) Click on key, new information screen will appears, on top right click button Delete in confirm dialog press Yes.   To see information about key just tap on key and new information dialog will be shown. On this screen you can see all information about key and using button \"Delete\" remove key from device.",
            "title": "Keys"
        },
        {
            "location": "/user-guide/#settings",
            "text": "In Settings you can configure Pin code and count of failed attempts entering Pin code.\nIf during first load application you didn't setup Pin code you can do it in this screen, what you need just turn on Pin protection. You can setup new Pin code or change current. If you set up totally new Pin code you can select type of Pin code - simple 4-digit Pin or custom.  You can change count of failed attempts entering Pin code, range is 5-10 attempts. If you enter wrong Pin code the same times as this count application will be locked for next 10 minutes and you should wait to have possibility enter Pin code again.",
            "title": "Settings"
        },
        {
            "location": "/user-guide/#push-notifications",
            "text": "Super Gluu can receive push notifications from Gluu servers. Server sends to application enrol/authentication request the same as you get by scanning QR code directly in app.    To order have possibility receive push notification you should approve receiving push in settings of application during first start or in Settings of device. Second step is enrol on server, during enrol application sends to server token of device, this token will be saved on server side and be used for sending push notification to device with this token.  If you recieved push notification you can make decision Approve or Deny directly from push menu. You have two options:  1) In case device in locked - swipe to left on push notification, you will see push menu with two buttons \"Approve\" and \"Deny\".  2) In case device isn't locked - swipe down on push notification, you will see push menu with two buttons \"Approve\" and \"Deny\".  3) If you click on push notification - application will open and you may see standard screen Approve/Deny with information and buttons.   Also Super Gluu can receive notification when application is opened and running in foreground mode. In that case you will see push view on top of main screen. This view contains text with request to server and two buttons Approve/Deny. You can make your decision directly on this view. If click Approve or Deny corresponding process will be launched.",
            "title": "Push Notifications"
        },
        {
            "location": "/user-guide/#landscape-mode-settings-ipad-support",
            "text": "Super gluu can work in landscape mode, you just need rotate you device and see effect. If in landscape mode some components are hidden you can scroll up/down to see them.         If you go to Settings of device in the bottom you may find Super Gluu aplication, there is few settings for application - push notifications, location, access to camera, pin code protection. If you want you can change configuration, but be sure it's ok for you because any change will change bevavior of application.   You can run Super Gluu on iPad devices, layout should be the same for all IOS devices.\nFor more information please see the  Gluu Website",
            "title": "Landscape mode &amp; Settings &amp; iPad support"
        },
        {
            "location": "/admin-guide/",
            "text": "Administration Guide\n#\n\n\nLearn how to implement Super Gluu in the Gluu Server \nauthentication guide\n.",
            "title": "Administaration Guide"
        },
        {
            "location": "/admin-guide/#administration-guide",
            "text": "Learn how to implement Super Gluu in the Gluu Server  authentication guide .",
            "title": "Administration Guide"
        },
        {
            "location": "/developer-guide/",
            "text": "Developer Guide\n#\n\n\nOverview\n#\n\n\nSuper Gluu is two-factor authentication application that can be used in conjunction with Gluu's free open source central authentication server, called the Gluu Server. During Enrollment oxPush2 uses the FIDO U2F endpoints built into the Gluu Server to enroll a public key. When authentication happens, there is a challenge response to ensure that the device has the respective private key.\n\n\nEnroll Super Gluu\n#\n\n\nDuring enroll/authentication app doing few steps:\n\n\n1) Scan QR code\n\n\nEach QR code contains data - app, state, issuer, created, for example:\n\n\n  {\n  \"app\" : \"https://example.gluu.org\",\n   \"state\" : \"dek4nwk6-dk56-sr43-4frt-4jfi30fltimd\"\n   \"issuer\" : \"https://example.gluu.org\"\n   \"created\" : \"2016-06-12T12:00:01.874000\"\n  }\n\n\n\n2) Data from QR code is tranformated to Fido U2F metadata:\n\n\n  String discoveryUrl = oxPush2Request.getIssuer();\n  discoveryUrl += \"/.well-known/fido-u2f-configuration\";\n  final String discoveryJson = CommunicationService.get(discoveryUrl, null);\n  final U2fMetaData u2fMetaData = new Gson().fromJson(discoveryJson, U2fMetaData.class);\n\n\n\nThis metadata we should send to server:\n\n\n  // need to check what we need to do enroll or authentication\n  final List<byte[]> keyHandles = dataStore.getKeyHandlesByIssuerAndAppId(oxPush2Request.getIssuer(),\n  oxPush2Request.getApp());\n  final boolean isEnroll = (keyHandles.size() == 0) || StringUtils.equals(oxPush2Request.getMethod(), \"enroll\");\n  final String u2fEndpoint;\n  if (isEnroll) \n    u2fEndpoint = u2fMetaData.getRegistrationEndpoint();// if enroll then get registration endpoint\n  } else {\n    u2fEndpoint = u2fMetaData.getAuthenticationEndpoint();// if authentication then get corresponding endpoint\n  }\n\n  validChallengeJsonResponse = CommunicationService.get(u2fEndpoint, parameters);\n\n\n\nWhen we got result from server we can manage next step - do enroll or authentication:\n\n\n    if (isEnroll) {\n        tokenResponse = oxPush2RequestListener.onEnroll(challengeJson, oxPush2Request, isDeny);\n    } else {\n        tokenResponse = oxPush2RequestListener.onSign(challengeJson, u2fMetaData.getIssuer(), isDeny);\n    }\n\n\n\nEnroll process\n#\n\n\nIf you scan QR-code at first time and your device UDID doesn't attached to your user then app will do enroll, first need prepare data properties:\n\n\n    String version = request.getString(JSON_PROPERTY_VERSION);\n    String appParam = request.getString(JSON_PROPERTY_APP_ID);\n    String challenge = request.getString(JSON_PROPERTY_SERVER_CHALLENGE);\n    String origin = oxPush2Request.getIssuer();\n\n    EnrollmentResponse enrollmentResponse = u2fKey.register(new EnrollmentRequest(version, appParam, challenge, oxPush2Request));\n\n\n\nDurring registerring app generates an unique keyHandle, keyPair (public/private keys) to sign all data and uses ECC algoritm to encode and data.\n\n\n    TokenEntry tokenEntry = new TokenEntry(keyPairGenerator.keyPairToJson(keyPair), enrollmentRequest.getApplication(), enrollmentRequest.getOxPush2Request().getIssuer());\n    .\n    .\n    .\n    dataStore.storeTokenEntry(keyHandle, tokenEntry);\n    byte[] userPublicKey = keyPairGenerator.encodePublicKey(keyPair.getPublic());\n\n    byte[] applicationSha256 = DigestUtils.sha256(application);\n    byte[] challengeSha256 = DigestUtils.sha256(challenge);\n    byte[] signedData = rawMessageCodec.encodeRegistrationSignedBytes(applicationSha256, challengeSha256, keyHandle, userPublicKey);\n    byte[] signature = keyPairGenerator.sign(signedData, certificatePrivateKey);\n    return new EnrollmentResponse(userPublicKey, keyHandle, vendorCertificate, signature);\n\n\n\nNow we need make all information in one byte array. Also need to set one aditional parameter which determines if we decided approve or deny our request:\n\n\n    JSONObject clientData = new JSONObject();\n    if (isDeny){\n        clientData.put(JSON_PROPERTY_REQUEST_TYPE, REGISTER_CANCEL_TYPE);//Deny\n    } else {\n        clientData.put(JSON_PROPERTY_REQUEST_TYPE, REQUEST_TYPE_REGISTER);//Approve\n    }\n    clientData.put(JSON_PROPERTY_SERVER_CHALLENGE, challenge);\n    clientData.put(JSON_PROPERTY_SERVER_ORIGIN, origin);\n\n    String clientDataString = clientData.toString();\n    byte[] resp = rawMessageCodec.encodeRegisterResponse(enrollmentResponse);\n\n    JSONObject response = new JSONObject();\n    response.put(\"registrationData\", Utils.base64UrlEncode(resp));\n    response.put(\"clientData\", Utils.base64UrlEncode(clientDataString.getBytes(Charset.forName(\"ASCII\"))));\n    response.put(\"deviceData\", Utils.base64UrlEncode(deviceDataString.getBytes(Charset.forName(\"ASCII\"))));\n\n    TokenResponse tokenResponse = new TokenResponse();\n    tokenResponse.setResponse(response.toString());\n    tokenResponse.setChallenge(new String(challenge));\n    tokenResponse.setKeyHandle(new String(enrollmentResponse.getKeyHandle()));\n\n    return tokenResponse;\n\n\n\nFor authentication no need to make extra data, all information is associated with your device UDID and each time gets from data store:\n\n\n    TokenEntry tokenEntry = dataStore.getTokenEntry(keyHandle);\n    String keyPairJson = tokenEntry.getKeyPair();\n    keyPair = keyPairGenerator.keyPairFromJson(keyPairJson);\n    int counter = dataStore.incrementCounter(keyHandle);\n    byte userPresence = userPresenceVerifier.verifyUserPresence();\n    byte[] applicationSha256 = DigestUtils.sha256(application);\n    byte[] challengeSha256 = DigestUtils.sha256(challenge);\n    byte[] signedData = rawMessageCodec.encodeAuthenticateSignedBytes(applicationSha256, userPresence, counter, challengeSha256);\n    return new AuthenticateResponse(userPresence, counter, signature);\n\n\n\nMethods onEnroll and onSign are preparing parameters and data before call to server. For more information about this two methods you can go to Git repo.\n\n\nNow when we have final data we can do last call to server:\n\n\n    final Map<String, String> parameters = new HashMap<String, String>();\n    parameters.put(\"username\", oxPush2Request.getUserName());\n    parameters.put(\"tokenResponse\", tokenResponse.getResponse());\n\n    final String resultJsonResponse = CommunicationService.post(u2fEndpoint, parameters);\n\n\n\nString resultJsonResponse contains result JSON. From result JSON we can extract some additionl information. Also we can check if enroll/authentication was success or not using this filed - u2fOperationResult.getStatus().\n\n\n    // Collect output information\n    LogInfo log = new LogInfo();\n    log.setIssuer(oxPush2Request.getIssuer());\n    log.setUserName(oxPush2Request.getUserName());\n    log.setLocationIP(oxPush2Request.getLocationIP());\n    log.setLocationAddress(oxPush2Request.getLocationCity());\n    log.setCreatedDate(String.valueOf(System.currentTimeMillis()));//oxPush2Request.getCreated());\n    log.setMethod(oxPush2Request.getMethod());",
            "title": "Developer Guide"
        },
        {
            "location": "/developer-guide/#developer-guide",
            "text": "",
            "title": "Developer Guide"
        },
        {
            "location": "/developer-guide/#overview",
            "text": "Super Gluu is two-factor authentication application that can be used in conjunction with Gluu's free open source central authentication server, called the Gluu Server. During Enrollment oxPush2 uses the FIDO U2F endpoints built into the Gluu Server to enroll a public key. When authentication happens, there is a challenge response to ensure that the device has the respective private key.",
            "title": "Overview"
        },
        {
            "location": "/developer-guide/#enroll-super-gluu",
            "text": "During enroll/authentication app doing few steps:  1) Scan QR code  Each QR code contains data - app, state, issuer, created, for example:    {\n  \"app\" : \"https://example.gluu.org\",\n   \"state\" : \"dek4nwk6-dk56-sr43-4frt-4jfi30fltimd\"\n   \"issuer\" : \"https://example.gluu.org\"\n   \"created\" : \"2016-06-12T12:00:01.874000\"\n  }  2) Data from QR code is tranformated to Fido U2F metadata:    String discoveryUrl = oxPush2Request.getIssuer();\n  discoveryUrl += \"/.well-known/fido-u2f-configuration\";\n  final String discoveryJson = CommunicationService.get(discoveryUrl, null);\n  final U2fMetaData u2fMetaData = new Gson().fromJson(discoveryJson, U2fMetaData.class);  This metadata we should send to server:    // need to check what we need to do enroll or authentication\n  final List<byte[]> keyHandles = dataStore.getKeyHandlesByIssuerAndAppId(oxPush2Request.getIssuer(),\n  oxPush2Request.getApp());\n  final boolean isEnroll = (keyHandles.size() == 0) || StringUtils.equals(oxPush2Request.getMethod(), \"enroll\");\n  final String u2fEndpoint;\n  if (isEnroll) \n    u2fEndpoint = u2fMetaData.getRegistrationEndpoint();// if enroll then get registration endpoint\n  } else {\n    u2fEndpoint = u2fMetaData.getAuthenticationEndpoint();// if authentication then get corresponding endpoint\n  }\n\n  validChallengeJsonResponse = CommunicationService.get(u2fEndpoint, parameters);  When we got result from server we can manage next step - do enroll or authentication:      if (isEnroll) {\n        tokenResponse = oxPush2RequestListener.onEnroll(challengeJson, oxPush2Request, isDeny);\n    } else {\n        tokenResponse = oxPush2RequestListener.onSign(challengeJson, u2fMetaData.getIssuer(), isDeny);\n    }",
            "title": "Enroll Super Gluu"
        },
        {
            "location": "/developer-guide/#enroll-process",
            "text": "If you scan QR-code at first time and your device UDID doesn't attached to your user then app will do enroll, first need prepare data properties:      String version = request.getString(JSON_PROPERTY_VERSION);\n    String appParam = request.getString(JSON_PROPERTY_APP_ID);\n    String challenge = request.getString(JSON_PROPERTY_SERVER_CHALLENGE);\n    String origin = oxPush2Request.getIssuer();\n\n    EnrollmentResponse enrollmentResponse = u2fKey.register(new EnrollmentRequest(version, appParam, challenge, oxPush2Request));  Durring registerring app generates an unique keyHandle, keyPair (public/private keys) to sign all data and uses ECC algoritm to encode and data.      TokenEntry tokenEntry = new TokenEntry(keyPairGenerator.keyPairToJson(keyPair), enrollmentRequest.getApplication(), enrollmentRequest.getOxPush2Request().getIssuer());\n    .\n    .\n    .\n    dataStore.storeTokenEntry(keyHandle, tokenEntry);\n    byte[] userPublicKey = keyPairGenerator.encodePublicKey(keyPair.getPublic());\n\n    byte[] applicationSha256 = DigestUtils.sha256(application);\n    byte[] challengeSha256 = DigestUtils.sha256(challenge);\n    byte[] signedData = rawMessageCodec.encodeRegistrationSignedBytes(applicationSha256, challengeSha256, keyHandle, userPublicKey);\n    byte[] signature = keyPairGenerator.sign(signedData, certificatePrivateKey);\n    return new EnrollmentResponse(userPublicKey, keyHandle, vendorCertificate, signature);  Now we need make all information in one byte array. Also need to set one aditional parameter which determines if we decided approve or deny our request:      JSONObject clientData = new JSONObject();\n    if (isDeny){\n        clientData.put(JSON_PROPERTY_REQUEST_TYPE, REGISTER_CANCEL_TYPE);//Deny\n    } else {\n        clientData.put(JSON_PROPERTY_REQUEST_TYPE, REQUEST_TYPE_REGISTER);//Approve\n    }\n    clientData.put(JSON_PROPERTY_SERVER_CHALLENGE, challenge);\n    clientData.put(JSON_PROPERTY_SERVER_ORIGIN, origin);\n\n    String clientDataString = clientData.toString();\n    byte[] resp = rawMessageCodec.encodeRegisterResponse(enrollmentResponse);\n\n    JSONObject response = new JSONObject();\n    response.put(\"registrationData\", Utils.base64UrlEncode(resp));\n    response.put(\"clientData\", Utils.base64UrlEncode(clientDataString.getBytes(Charset.forName(\"ASCII\"))));\n    response.put(\"deviceData\", Utils.base64UrlEncode(deviceDataString.getBytes(Charset.forName(\"ASCII\"))));\n\n    TokenResponse tokenResponse = new TokenResponse();\n    tokenResponse.setResponse(response.toString());\n    tokenResponse.setChallenge(new String(challenge));\n    tokenResponse.setKeyHandle(new String(enrollmentResponse.getKeyHandle()));\n\n    return tokenResponse;  For authentication no need to make extra data, all information is associated with your device UDID and each time gets from data store:      TokenEntry tokenEntry = dataStore.getTokenEntry(keyHandle);\n    String keyPairJson = tokenEntry.getKeyPair();\n    keyPair = keyPairGenerator.keyPairFromJson(keyPairJson);\n    int counter = dataStore.incrementCounter(keyHandle);\n    byte userPresence = userPresenceVerifier.verifyUserPresence();\n    byte[] applicationSha256 = DigestUtils.sha256(application);\n    byte[] challengeSha256 = DigestUtils.sha256(challenge);\n    byte[] signedData = rawMessageCodec.encodeAuthenticateSignedBytes(applicationSha256, userPresence, counter, challengeSha256);\n    return new AuthenticateResponse(userPresence, counter, signature);  Methods onEnroll and onSign are preparing parameters and data before call to server. For more information about this two methods you can go to Git repo.  Now when we have final data we can do last call to server:      final Map<String, String> parameters = new HashMap<String, String>();\n    parameters.put(\"username\", oxPush2Request.getUserName());\n    parameters.put(\"tokenResponse\", tokenResponse.getResponse());\n\n    final String resultJsonResponse = CommunicationService.post(u2fEndpoint, parameters);  String resultJsonResponse contains result JSON. From result JSON we can extract some additionl information. Also we can check if enroll/authentication was success or not using this filed - u2fOperationResult.getStatus().      // Collect output information\n    LogInfo log = new LogInfo();\n    log.setIssuer(oxPush2Request.getIssuer());\n    log.setUserName(oxPush2Request.getUserName());\n    log.setLocationIP(oxPush2Request.getLocationIP());\n    log.setLocationAddress(oxPush2Request.getLocationCity());\n    log.setCreatedDate(String.valueOf(System.currentTimeMillis()));//oxPush2Request.getCreated());\n    log.setMethod(oxPush2Request.getMethod());",
            "title": "Enroll process"
        }
    ]
}